1. Write Mongo query to retrieve the documents from the orders where the customer_id is 1.
--------------------------------------------------------------------------------------
   Aggregation_1> db.orders.aggregate([{$match:{customer_id:1}}])
   [
     {
       _id: 1,
       customer_id: 1,
       order_date: '2022-03-01',
       ship_date: '2022-03-05',
       status: 'shipped',
       total: 50.25
     }
   ]
Aggregation_1>

------------------------------------------------------------------------------------------------------------


2. Write Mongo query to retrieve documents from the products where supplier_id is 3 .
---------------------------------------------------------------------------------------------------------
   Aggregation_1> db.products.aggregate([{$match:{supplier_id:3}}])

   Aggregation_1>
------------------------------------------------------------------------------------------------------------------

3. Write Mongo query to retrieve the documents from the orders collection with "status": "shipped" .
------------------------------------------------------------------------------------------------------------------
   Aggregation_1> db.orders.aggregate([{$match:{"status": "shipped"}}])
   [
     {
       _id: 1,
       customer_id: 1,
       order_date: '2022-03-01',
       ship_date: '2022-03-05',
       status: 'shipped',
       total: 50.25
     }
   ]
   Aggregation_1>

-----------------------------------------------------------------------------------------------------------------------

4. Write Mongo query to retrieve the amount and paymentMethod from payments where the paymentMethod is not UPI.
-------------------------------------------------------------------------------------------
   Aggregation_1> db.payments.aggregate([{$match:{paymentMethod:{$ne:"UPI"}}},{$project:{amount:1,paymentMethod:1}}])
   [ { _id: 2, amount: 1120, paymentMethod: 'Debit Card' } ]
   Aggregation_1>

   Aggregation_1> db.payments.aggregate([{$match:{paymentMethod:{$ne:"UPI"}}},{$project:{amount:1,paymentMethod:1,_id:0}}])
   [ { amount: 1120, paymentMethod: 'Debit Card' } ]
   Aggregation_1>
-------------------------------------------------------------------------------------------------------------------------------

5. Write Mongo query to retrieve the paymentstatus where the amount is greater than 100.
-----------------------------------------------------------------------------------------------------------
   Aggregation_1> db.payments.aggregate([{$match:{amount:{$gt:100}}},{$project:{paymentstatus:1,_id:0}}])
   [ { paymentstatus: 'pending' } ]
   Aggregation_1>

--------------------------------------------------------------------------------------------------------------

6. Write Mongo query to retrieve the shipper_id and price from the order_details where the price is greater than 2000.
------------------------------------------------------------------------------------------------------
   Aggregation_1> db.order_details.aggregate([{$match:{price:{$gt:2000}}},{$project:{shipper_id:1,price:1,_id:0}}])

   Aggregation_1>

--------------------------------------------------------------------------------------------------------

7. Write Mongo query to retrieve the customer_id and _id from the orders where the status is not shipped.
-----------------------------------------------------------------------------------------------------
   Aggregation_1> db.orders.aggregate([{$match:{status:{$ne:"shipped"}}},{$project:{customer_id:1,_id:1}}])
   [ { _id: 2, customer_id: 2 } ]
   Aggregation_1>

--------------------------------------------------------------------------------------------------------

8.Write Mongo query to retrieve documents from the products where category_id is 1 with out product _id.
-------------------------------------------------------------------------------------------------------
   Aggregation_1> db.products.aggregate([{$match:{category_id:1}},{$project:{_id:0}}])
   [
     {
       name: 'iPhone 13',
       category_id: 1,
       price: 999.99,
       quantity: 50,
       supplier_id: 1
     },
     {
       name: 'Samsung Galaxy S21',
       category_id: 1,
       price: 799.99,
       quantity: 100,
       supplier_id: 2
     }
   ]
   Aggregation_1>

----------------------------------------------------------------------------------------------------------------------

9. Write Mongo query to retrieve name,quantity from the products where price greater than 1500 .
---------------------------------------------------------------------------------------------------------
   Aggregation_1> db.products.aggregate([{$match:{price:{$gt:1500}}},{$project:{name:1,quantity:1,_id:0}}])

   Aggregation_1>

-------------------------------------------------------------------------------------------------------------

10. Write Mongo query to retrieve the name from the shippers where the phone number is 1-800-742-5877.
--------------------------------------------------------------------------------------------------
   Aggregation_1> db.shippers.aggregate([{$match:{phone:"1-800-742-5877"}},{$project:{name:1,_id:0}}])
   [ { name: 'UPS' } ]
   Aggregation_1>

---------------------------------------------------------------------------------------------------------

11. Write Mongo query to retrieve the city and phone of the suppliers where the suppliers name is Sony.
---------------------------------------------------------------------------------------------------------
   Aggregation_1> db.suppliers.aggregate([{$match:{name:"Sony"}},{$project:{city:1,phone:1,_id:0}}])

   Aggregation_1>

------------------------------------------------------------------------------------------------------------

12. Write Mongo query to retrieve the name of the suppliers where the city is Tokyo.
--------------------------------------------------------------------------------------------------------
   Aggregation_1> db.suppliers.aggregate([{$match:{city:"Tokyo"}},{$project:{name:1,_id:0}}])

   Aggregation_1>

----------------------------------------------------------------------------------------------------------

13. Write Mongo query to find amount of payment made through "UPI" ?
---------------------------------------------------------------------------------------------------------
   Aggregation_1> db.payments.aggregate([{$match:{paymentMethod:"UPI"}},{$group:{_id:null,TotallAmountOfPayment:{$sum:"$amount"}}}])
   [ { _id: null, TotallAmountOfPayment: 50.25 } ]
   Aggregation_1>

------------------------------------------------------------------------------------------------------------

14. Write Mongo query to find buyers city as key name "city" who uses hotmail ?
--------------------------------------------------------------------------------------------------------
   Aggregation_1> db.buyers.aggregate([{$match:{email:/hotmail.com$/}},{$project:{city:"$address.city"}}])
   [ { _id: 1, city: 'New York' } ]
   Aggregation_1>

----------------------------------------------------------------------------------------------------------

15. Use MongoDB aggregation to retrieve the top 5 most recent orders that have been shipped, projecting the order date, status, and total amount.
--------------------------------------------------------------------------------------------------------------------------------------------------
   Aggregation_1> db.orders.aggregate([{$match:{status:"shipped"}},{$sort:{order_date:-1}},{$limit:5},{$project:{order_date:1,status:1,total:1,_id:0}}])
   [ { order_date: '2022-03-01', status: 'shipped', total: 50.25 } ]
   Aggregation_1>

------------------------------------------------------------------------------------------------------------

16. Aggregate the first 3 payments with a "success" status, projecting the payment date, amount, and method.
--------------------------------------------------------------------------------------------------------
   Aggregation_1> db.payments.aggregate([{$match:{paymentstatus:"success"}},{$limit:3},{$project:{payment_date:1,amount:1,paymentMethod:1,_id:0}}])
   [ { payment_date: '2022-03-01', amount: 50.25, paymentMethod: 'UPI' } ]
   Aggregation_1>

----------------------------------------------------------------------------------------------------------

17. Aggregate all pending orders, sort them by the order date in descending order, and project the customer ID, order date, and total amount.
---------------------------------------------------------------------------------------------------------
   Aggregation_1> db.orders.aggregate([{$match:{status:"pending"}},{$sort:{order_date:-1}},{$project:{customer_id:1,order_date:1,total:1,_id:0}}])
   [ { customer_id: 2, order_date: '2022-04-01', total: 1120 } ]
   Aggregation_1>

------------------------------------------------------------------------------------------------------------

18. Aggregate products, sort them by quantity in descending order, limit the result to the top 10 items, and project the product name and quantity.
--------------------------------------------------------------------------------------------------------
   Aggregation_1> db.products.aggregate([{$sort:{quantity:-1}},{$limit:10},{$project:{name:1,quantity:1,_id:0}}])
   [
     { name: 'Samsung Galaxy S21', quantity: 100 },
     { name: 'iPhone 13', quantity: 50 }
   ]
   Aggregation_1>

----------------------------------------------------------------------------------------------------------